// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`fontFace should respect the file format configuration object 1`] = `
Object {
  "@font-face": Object {
    "fontFamily": "Sans Pro",
    "src": "local(\\"Sans Pro\\"), url(\\"path/to/file.eot\\"), url(\\"path/to/file.svg\\")",
  },
}
`;

exports[`fontFace should return a valid object when passed both a file-based source and multiple local sources 1`] = `
Object {
  "@font-face": Object {
    "fontFamily": "Sans Pro",
    "src": "local(\\"sans-pro\\"), local(\\"sans pro\\"), url(\\"path/to/file.eot\\"), url(\\"path/to/file.woff2\\"), url(\\"path/to/file.woff\\"), url(\\"path/to/file.ttf\\"), url(\\"path/to/file.svg\\")",
  },
}
`;

exports[`fontFace should return a valid object when passed both local and file-based sources 1`] = `
Object {
  "@font-face": Object {
    "fontFamily": "Sans Pro",
    "src": "local(\\"sans-pro\\"), url(\\"path/to/file.eot\\"), url(\\"path/to/file.woff2\\"), url(\\"path/to/file.woff\\"), url(\\"path/to/file.ttf\\"), url(\\"path/to/file.svg\\")",
  },
}
`;

exports[`fontFace should return a valid object when passed false for localFonts 1`] = `
Object {
  "@font-face": Object {
    "fontFamily": "Sans Pro",
    "src": "url(\\"path/to/file.eot\\"), url(\\"path/to/file.woff2\\"), url(\\"path/to/file.woff\\"), url(\\"path/to/file.ttf\\"), url(\\"path/to/file.svg\\")",
  },
}
`;

exports[`fontFace should return a valid object when passed just a family and source 1`] = `
Object {
  "@font-face": Object {
    "fontFamily": "Sans Pro",
    "src": "local(\\"Sans Pro\\"), url(\\"path/to/file.eot\\"), url(\\"path/to/file.woff2\\"), url(\\"path/to/file.woff\\"), url(\\"path/to/file.ttf\\"), url(\\"path/to/file.svg\\")",
  },
}
`;

exports[`fontFace should return a valid object when passed only local sources 1`] = `
Object {
  "@font-face": Object {
    "fontFamily": "Sans Pro",
    "src": "local(\\"sans-pro\\"), local(\\"sans pro\\")",
  },
}
`;

exports[`fontFace should return base64 src 1`] = `
Object {
  "@font-face": Object {
    "fontFamily": "Sans Pro",
    "src": "local(\\"Sans Pro\\"), url(\\"data:application/x-font-woff;charset=utf-8;base64,iVBORw0KGgoAAAANSUhEUgAAABAAAAAQAQMAAAAlPW0iAAAABlBMVEUAAAD///+l2Z/dAAAAM0lEQVR4nGP4/5/h/1+G/58ZDrAz3D/McH8yw83NDDeNGe4Ug9C9zwz3gVLMDA/A6P9/AFGGFyjOXZtQAAAAAElFTkSuQmCC\\")",
  },
}
`;

exports[`fontFace should return base64 src with format hint 1`] = `
Object {
  "@font-face": Object {
    "fontFamily": "Sans Pro",
    "src": "local(\\"Sans Pro\\"), url(\\"data:application/x-font-woff;charset=utf-8;base64,iVBORw0KGgoAAAANSUhEUgAAABAAAAAQAQMAAAAlPW0iAAAABlBMVEUAAAD///+l2Z/dAAAAM0lEQVR4nGP4/5/h/1+G/58ZDrAz3D/McH8yw83NDDeNGe4Ug9C9zwz3gVLMDA/A6P9/AFGGFyjOXZtQAAAAAElFTkSuQmCC\\") format(\\"woff\\")",
  },
}
`;

exports[`fontFace should set generate format hints 1`] = `
Object {
  "@font-face": Object {
    "fontFamily": "Sans Pro",
    "fontStretch": "condensed",
    "fontStyle": "italic",
    "fontWeight": "bold",
    "src": "local(\\"Sans Pro\\"), url(\\"path/to/file.eot\\") format(\\"embedded-opentype\\"), url(\\"path/to/file.svg\\") format(\\"svg\\"), url(\\"path/to/file.svgz\\") format(\\"svg\\"), url(\\"path/to/file.woff\\") format(\\"woff\\"), url(\\"path/to/file.woff2\\") format(\\"woff2\\"), url(\\"path/to/file.otf\\") format(\\"opentype\\"), url(\\"path/to/file.ttf\\") format(\\"truetype\\")",
  },
}
`;

exports[`fontFace should set passed font configuration variables 1`] = `
Object {
  "@font-face": Object {
    "fontDisplay": "swap",
    "fontFamily": "Sans Pro",
    "fontFeatureSettings": "\\"smcp\\" on",
    "fontStretch": "condensed",
    "fontStyle": "italic",
    "fontVariant": "small-caps",
    "fontVariationSettings": "\\"XHGT\\" 0.7",
    "fontWeight": "bold",
    "src": "local(\\"Sans Pro\\"), url(\\"path/to/file.eot\\"), url(\\"path/to/file.woff2\\"), url(\\"path/to/file.woff\\"), url(\\"path/to/file.ttf\\"), url(\\"path/to/file.svg\\")",
    "unicodeRange": "U+26",
  },
}
`;
