// @flow
const errorStyles = 'padding: 2px; font-weight: bold; background: red; color: black'
const warningStyles = 'padding: 2px; font-weight: bold; background: gold; color: black'

function formatMessage(
  type: string,
  messageBody: string,
  moduleName: string,
  modulePath: string,
) {
  const header = `%c -- ${type} --------------------------------------------------- ${modulePath} -- `

  const body = `%c


${moduleName} %c${messageBody}

  `

  const info = `%c
Please see the documentation at %chttps://www.polished.js.org/#${moduleName} %cfor more information.

  `

  return `${header}${body}${info}`
}

function generateHeaderStyles(type: string) {
  return type === 'error' ? errorStyles : warningStyles
}

/**
 * Handles the formatting of warnings and errors generated by modules.
 * @private
 */

function messageHandler(
  type: string,
  messageBody: string,
  moduleName: string,
  modulePath: string,
) {
  const message = formatMessage(type, messageBody, moduleName, modulePath)
  const headerStyles = generateHeaderStyles(type)
  // eslint-disable-next-line no-console
  console.log(
    message,
    headerStyles,
    'color: black',
    'color: slategray; font-weight: bold',
    'color: slategray',
    'color: blue',
    'color: slategray',
  )
}

function getCaller() {
  let file
  let frame

  const pst = Error.prepareStackTrace
  Error.prepareStackTrace = (_, stack) => {
    Error.prepareStackTrace = pst
    return stack
  }
  // eslint-disable-next-line prefer-destructuring
  let stack = new Error().stack
  stack = stack.slice(2)

  do {
    // $FlowFixMe
    frame = stack.shift()
    file = frame && frame.getFileName()
  } while (stack.length && file === 'module.js')

  return file
}

function getModuleInfo(callerModule) {
  const moduleName = callerModule.match(/([^/]+)(?=\.\w+$)/)[0]
  const callerArray = callerModule.split('/')
  const modulePath = `${callerArray[callerArray.length - 2]}/${
    callerArray[callerArray.length - 1]
  }`
  return [moduleName, modulePath]
}

export function error(messageBody: string) {
  messageHandler('error', messageBody, ...getModuleInfo(getCaller()))
}

export function warning(messageBody: string) {
  messageHandler('warning', messageBody, ...getModuleInfo(getCaller()))
}
